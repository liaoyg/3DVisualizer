/***********************************************************************
Vector3DLICRenderer - Wrapper class for 3D Line integral convolution
renderers as visualization elements.
Part of the wrapper layer of the templatized visualization
components.
Copyright (c) 20017-2019 Yangguang Liao

This file is part of the 3D Data Visualizer (Visualizer).

The 3D Data Visualizer is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

The 3D Data Visualizer is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the 3D Data Visualizer; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#define VISUALIZATION_WRAPPERS_VECTOR3DLICRENDERER_IMPLEMENTATION

#include <Wrappers/Vector3DLICRenderer.h>

#include <stdio.h>
#include <iostream>
#include <Misc/ThrowStdErr.h>
#include <GLMotif/StyleSheet.h>
#include <GLMotif/WidgetManager.h>
#include <GLMotif/PopupWindow.h>
#include <GLMotif/RowColumn.h>
#include <GLMotif/Label.h>

#include <Templatized/VolumeRenderingSampler.h>
#include <Wrappers/Vector3DLICRendererExtractor.h>

#include <GLRenderState.h>
#include <LICRaycaster.h>

namespace Visualization {

namespace Wrappers {

/********************************************
Methods of class Vector3DLICRenderer:
********************************************/

template <class DataSetWrapperParam>
inline
Vector3DLICRenderer<DataSetWrapperParam>::Vector3DLICRenderer(
	Visualization::Abstract::Algorithm* algorithm,
	Visualization::Abstract::Parameters* sParameters)
	:Visualization::Abstract::Element(algorithm->getVariableManager(),sParameters),
	 raycaster(0)
	{
	transparencyGammaSlider=0;
	/* Get proper pointers to the algorithm and parameter objects: */
	typedef Vector3DLICRendererExtractor<DataSetWrapper> MyAlgorithm;
	typedef typename MyAlgorithm::Parameters MyParameters;
	MyAlgorithm* myAlgorithm=dynamic_cast<MyAlgorithm*>(algorithm);
	if(myAlgorithm==0)
		Misc::throwStdErr("Vector3DLICRenderer: Mismatching algorithm object type");
	MyParameters* myParameters=dynamic_cast<MyParameters*>(getParameters());
	if(myParameters==0)
		Misc::throwStdErr("Vector3DLICRenderer: Mismatching parameter object type");
	
	/* Check if all three scalar channels are from the same data set: */
	Visualization::Abstract::VariableManager* variableManager=algorithm->getVariableManager();
	const Visualization::Abstract::DataSet* dataSet=variableManager->getDataSetByVectorVariable(myParameters->vectorVariableIndex);
//	for(int channel=1;channel<3;++channel)
//		if(variableManager->getDataSetByScalarVariable(myParameters->scalarVariableIndices[channel])!=dataSet)
//			Misc::throwStdErr("Vector3DLICRenderer: Mismatching scalar variables");
	
	/* Get a reference to the templatized data set: */
	const DataSetWrapper* myDataSet=dynamic_cast<const DataSetWrapper*>(dataSet);
	if(myDataSet==0)
		Misc::throwStdErr("Vector3DLICRenderer: Mismatching data set type");
	const DS& ds=myDataSet->getDs();
	
	/* Create a volume rendering sampler: */
	Visualization::Templatized::VolumeRenderingSampler<DS> sampler(ds);
	
	/* Initialize the raycaster: */
	raycaster=new LICRaycaster(sampler.getSamplerSize(),ds.getDomainBox());
        raycaster->setLICMask(variableManager->getLICMask());
	
	/* Sample the three scalar channels: */

        /* Get a scalar extractor for the channel: */
        int vvi=myParameters->vectorVariableIndex;
//        const ScalarExtractor* myScalarExtractor=dynamic_cast<const ScalarExtractor*>(variableManager->getScalarExtractor(svi));
        const VectorExtractor* myVectorExtractor=dynamic_cast<const VectorExtractor*>(variableManager->getVectorExtractor(vvi));
//        if(myScalarExtractor==0)
//                Misc::throwStdErr("Vector3DLICRenderer: Mismatching scalar extractor type");
        if(myVectorExtractor==0)
                Misc::throwStdErr("Vector3DLICRenderer: Mismatching vector extractor type");
//        const SE& se=myScalarExtractor->getSe();
        const VE& ve=myVectorExtractor->getVe();

        /* Get the scalar value range: */
//        typename SE::Scalar minValue=typename SE::Scalar(variableManager->getScalarValueRange(svi).first);
//        typename SE::Scalar maxValue=typename SE::Scalar(variableManager->getScalarValueRange(svi).second);

        std::cout << "scalar: " << variableManager->getVectorVariableName(vvi) <<" index: " << vvi << std::endl;
//        std::cout << "min: " << minValue << " max: " <<maxValue <<std::endl;
        const ptrdiff_t* strides = raycaster->getDataStrides();
        std::cout << "strides: " << strides[0] << " " << strides[1] << " " << strides[2] <<std::endl;
        /* Sample the channel: */
//		sampler.sampleDirect(se,minValue,raycaster->getData(channel),raycaster->getDataStrides(),algorithm->getPipe(),100.0f/3.0f,100.0f*float(channel)/3.0f,algorithm);
        sampler.sampleVec(ve,raycaster->getData(0),raycaster->getDataStrides(),algorithm->getPipe(),100.0f,0.0f,algorithm);
        raycaster->setColorMap(variableManager->getColorMapLIC());
        raycaster->setTransparencyGamma(myParameters->transparencyGamma);
                
	raycaster->updateData();
	
	/* Set the raycaster's step size: */
	raycaster->setStepSize(myParameters->sliceFactor);
        raycaster->setLICStepSize(myParameters->licStepSize);
	}

template <class DataSetWrapperParam>
inline
Vector3DLICRenderer<DataSetWrapperParam>::~Vector3DLICRenderer(
	void)
	{
	delete raycaster;
	}

template <class DataSetWrapperParam>
inline
GLMotif::Widget*
Vector3DLICRenderer<DataSetWrapperParam>::createSettingsDialog(
	GLMotif::WidgetManager* widgetManager)
	{
	/* Get the style sheet: */
	const GLMotif::StyleSheet* ss=widgetManager->getStyleSheet();
	
	/* Create the settings dialog window: */
	GLMotif::PopupWindow* settingsDialogPopup=new GLMotif::PopupWindow("Vector3DLICRendererSettingsDialogPopup",widgetManager,"3D LIC Renderer Settings");
	settingsDialogPopup->setResizableFlags(true,false);
	
	GLMotif::RowColumn* settingsDialog=new GLMotif::RowColumn("SettingsDialog",settingsDialogPopup,false);
	settingsDialog->setNumMinorWidgets(2);
	
	/* Create a slider to change the slice factor: */
	new GLMotif::Label("SliceFactorLabel",settingsDialog,"Slice Factor");
	
	GLMotif::TextFieldSlider* sliceFactorSlider=new GLMotif::TextFieldSlider("SliceFactorSlider",settingsDialog,6,ss->fontHeight*10.0f);
	sliceFactorSlider->getTextField()->setFloatFormat(GLMotif::TextField::FIXED);
	sliceFactorSlider->getTextField()->setPrecision(3);
	sliceFactorSlider->setSliderMapping(GLMotif::TextFieldSlider::EXP10);
	sliceFactorSlider->setValueRange(0.1,10.0,0.1);
	sliceFactorSlider->setValue(raycaster->getStepSize());
	sliceFactorSlider->getValueChangedCallbacks().add(this,&Vector3DLICRenderer::sliceFactorCallback);
        
        new GLMotif::Label("TransparencyGammaSliderLabel",settingsDialog,"Transparency Gamma");
        transparencyGammaSlider=new GLMotif::TextFieldSlider("TransparencyGammaSlider",settingsDialog,6,ss->fontHeight*10.0f);
        transparencyGammaSlider->getTextField()->setFloatFormat(GLMotif::TextField::FIXED);
        transparencyGammaSlider->getTextField()->setPrecision(3);
        transparencyGammaSlider->setSliderMapping(GLMotif::TextFieldSlider::EXP10);
        transparencyGammaSlider->setValueRange(0.1,10.0,0.1);
        transparencyGammaSlider->setValue(raycaster->getTransparencyGamma());
        transparencyGammaSlider->getValueChangedCallbacks().add(this,&Vector3DLICRenderer::transparencyGammaCallback);
	
	settingsDialog->manageChild();
	
	return settingsDialogPopup;
	}

template <class DataSetWrapperParam>
inline
std::string
Vector3DLICRenderer<DataSetWrapperParam>::getName(
	void) const
	{
	return "Triple-Channel Volume Renderer";
	}

template <class DataSetWrapperParam>
inline
size_t
Vector3DLICRenderer<DataSetWrapperParam>::getSize(
	void) const
	{
	return size_t(raycaster->getDataSize(0)-1)*size_t(raycaster->getDataSize(1)-1)*size_t(raycaster->getDataSize(2)-1);
	}

template <class DataSetWrapperParam>
inline
void
Vector3DLICRenderer<DataSetWrapperParam>::glRenderAction(
	GLRenderState& renderState) const
	{
	/* Render the volume: */
	raycaster->glRenderAction(renderState.getContextData());
	}

template <class DataSetWrapperParam>
inline
void
Vector3DLICRenderer<DataSetWrapperParam>::sliceFactorCallback(
	GLMotif::TextFieldSlider::ValueChangedCallbackData* cbData)
	{
	/* Get proper pointer to the parameter object: */
	typename Vector3DLICRendererExtractor<DataSetWrapper>::Parameters* myParameters=dynamic_cast<typename Vector3DLICRendererExtractor<DataSetWrapper>::Parameters*>(getParameters());
	if(myParameters==0)
		Misc::throwStdErr("Vector3DLICRenderer: Mismatching parameter object type");
	
	/* Change the slice factor: */
	Scalar sliceFactor=Scalar(cbData->value);
	myParameters->sliceFactor=sliceFactor;
	raycaster->setStepSize(sliceFactor);
	}

template <class DataSetWrapperParam>
inline
void
Vector3DLICRenderer<DataSetWrapperParam>::transparencyGammaCallback(
	GLMotif::TextFieldSlider::ValueChangedCallbackData* cbData)
	{
	/* Get proper pointer to the parameter object: */
	typename Vector3DLICRendererExtractor<DataSetWrapper>::Parameters* myParameters=dynamic_cast<typename Vector3DLICRendererExtractor<DataSetWrapper>::Parameters*>(getParameters());
	if(myParameters==0)
		Misc::throwStdErr("Vector3DLICRenderer: Mismatching parameter object type");
	
	/* Find the changed channel: */
	if(cbData->slider==transparencyGammaSlider)
                {
                /* Change the transparency gamma factor: */
                float transparencyGamma=float(cbData->value);
                myParameters->transparencyGamma=transparencyGamma;
                raycaster->setTransparencyGamma(transparencyGamma);
                }
        }

}

}
