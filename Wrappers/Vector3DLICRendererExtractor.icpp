/***********************************************************************
Vector3DLICRendererExtractor - Wrapper class to map from the
abstract visualization algorithm interface to a templatized 3D Line 
Integral Convolution renderer implementation.
Copyright (c) 2017-2019 Yangguang Liao

This file is part of the 3D Data Visualizer (Visualizer).

The 3D Data Visualizer is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

The 3D Data Visualizer is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the 3D Data Visualizer; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#define VISUALIZATION_WRAPPERS_VECTOR3DLICRENDEREREXTRACTOR_IMPLEMENTATION

#include <Wrappers/Vector3DLICRendererExtractor.h>

#include <stdio.h>
#include <Misc/ThrowStdErr.h>
#include <Misc/StandardMarshallers.h>
#include <Misc/StandardValueCoders.h>
#include <Geometry/GeometryMarshallers.h>
#include <Geometry/GeometryValueCoders.h>
#include <GLMotif/StyleSheet.h>
#include <GLMotif/WidgetManager.h>
#include <GLMotif/PopupWindow.h>
#include <GLMotif/Margin.h>
#include <GLMotif/Blind.h>
#include <GLMotif/Label.h>
#include <GLMotif/RowColumn.h>

#include <Abstract/VariableManager.h>
#include <Abstract/ParametersSink.h>
#include <Abstract/ParametersSource.h>
#include <Wrappers/ScalarExtractor.h>

namespace Visualization {

namespace Wrappers {

/*****************************************************************
Methods of class Vector3DLICRendererExtractor::Parameters:
*****************************************************************/

template <class DataSetWrapperParam>
inline
void
Vector3DLICRendererExtractor<DataSetWrapperParam>::Parameters::write(
	Visualization::Abstract::ParametersSink& sink) const
	{
	/* Write all parameters: */
	sink.write("sliceFactor",Visualization::Abstract::Writer<Scalar>(sliceFactor));
	sink.write("licStepSize",Visualization::Abstract::Writer<Scalar>(licStepSize));
	sink.writeScalarVariable("fowardIteration",fowardIteration);
        sink.writeScalarVariable("backwardIteration",backwardIteration);
	sink.write("noiseFrequency",Visualization::Abstract::Writer<Scalar>(noiseFrequency));
	sink.write("illuminScale",Visualization::Abstract::Writer<Scalar>(illuminScale));
	sink.write("transparencyGamma",Visualization::Abstract::Writer<float>(transparencyGamma));
	}

template <class DataSetWrapperParam>
inline
void
Vector3DLICRendererExtractor<DataSetWrapperParam>::Parameters::read(
	Visualization::Abstract::ParametersSource& source)
	{
	/* Read all parameters: */
	source.read("sliceFactor",Visualization::Abstract::Reader<Scalar>(sliceFactor));
        source.read("licStepSize",Visualization::Abstract::Reader<Scalar>(licStepSize));
	source.readScalarVariable("fowardIteration",fowardIteration);
	source.readScalarVariable("backwardIteration",backwardIteration);
        source.read("noiseFrequency",Visualization::Abstract::Reader<Scalar>(noiseFrequency));
        source.read("illuminScale",Visualization::Abstract::Reader<Scalar>(illuminScale));
	source.read("transparencyGammas",Visualization::Abstract::Reader<float>(transparencyGamma));
	}

/*************************************************************
Static elements of class Vector3DLICRendererExtractor:
*************************************************************/

template <class DataSetWrapperParam>
const char* Vector3DLICRendererExtractor<DataSetWrapperParam>::name="3D LIC Renderer";

/*****************************************************
Methods of class Vector3DLICRendererExtractor:
*****************************************************/

template <class DataSetWrapperParam>
inline
Vector3DLICRendererExtractor<DataSetWrapperParam>::Vector3DLICRendererExtractor(
	Visualization::Abstract::VariableManager* sVariableManager,
	 Cluster::MulticastPipe* sPipe)
	:Abstract::Algorithm(sVariableManager,sPipe)
	{
	/* Initialize parameters: */
        parameters.vectorVariableIndex=sVariableManager->getCurrentVectorVariable()%sVariableManager->getNumVectorVariables();
	parameters.sliceFactor=Scalar(1);
        parameters.licStepSize = Scalar(0.5);
        parameters.fowardIteration = 32;
        parameters.backwardIteration = 32;
        parameters.noiseFrequency = Scalar(5.0);
        parameters.illuminScale = Scalar(1.0);
        parameters.transparencyGamma=1.0f;

        LICStepSizeValueSlider = 0;
	}

template <class DataSetWrapperParam>
inline
Vector3DLICRendererExtractor<DataSetWrapperParam>::~Vector3DLICRendererExtractor(
	void)
	{
	}

template <class DataSetWrapperParam>
inline
GLMotif::Widget*
Vector3DLICRendererExtractor<DataSetWrapperParam>::createSettingsDialog(
	GLMotif::WidgetManager* widgetManager)
	{
	/* Get the style sheet: */
	const GLMotif::StyleSheet* ss=widgetManager->getStyleSheet();
	
	/* Create the settings dialog window: */
	GLMotif::PopupWindow* settingsDialogPopup=new GLMotif::PopupWindow("Vector3DLICRendererExtractorSettingsDialogPopup",widgetManager,"3D LIC Renderer Extractor Settings");
	settingsDialogPopup->setResizableFlags(true,false);
	
	GLMotif::RowColumn* settingsDialog=new GLMotif::RowColumn("SettingsDialog",settingsDialogPopup,false);
	settingsDialog->setNumMinorWidgets(2);
	
        new GLMotif::Label("LICStepSizeLabel",settingsDialog,"LIC Stepsize");
        GLMotif::Margin* scalarVariableMargin=new GLMotif::Margin("LICStepSizeMargin",settingsDialog,false);
	scalarVariableMargin->setAlignment(GLMotif::Alignment::LEFT);
        
        LICStepSizeValueSlider=new GLMotif::TextFieldSlider("LICStepSizeValueSlider",settingsDialog,12,ss->fontHeight*20.0f);
        LICStepSizeValueSlider->setSliderMapping(GLMotif::TextFieldSlider::LINEAR);
        LICStepSizeValueSlider->setValueRange(0.0f,2.0f, 0.0f);
        LICStepSizeValueSlider->setValue(parameters.licStepSize);
        LICStepSizeValueSlider->getValueChangedCallbacks().add(this,&Vector3DLICRendererExtractor::LICStepSizeValueCallback);
	
	settingsDialog->manageChild();
	
	return settingsDialogPopup;
	}

template <class DataSetWrapperParam>
inline
void
Vector3DLICRendererExtractor<DataSetWrapperParam>::readParameters(
	Visualization::Abstract::ParametersSource& source)
	{
	/* Read the current parameters: */
	parameters.read(source);
	
	/* Update the GUI: */
//        LICStepSizeValueSlider->setValue(raycaster->);
	}

template <class DataSetWrapperParam>
inline
Visualization::Abstract::Element*
Vector3DLICRendererExtractor<DataSetWrapperParam>::createElement(
	Visualization::Abstract::Parameters* extractParameters)
	{
	/* Create a new volume renderer visualization element: */
	return new Vector3DLICRenderer(this,extractParameters);
	}

template <class DataSetWrapperParam>
inline
Visualization::Abstract::Element*
Vector3DLICRendererExtractor<DataSetWrapperParam>::startSlaveElement(
	Visualization::Abstract::Parameters* extractParameters)
	{
	if(isMaster())
		Misc::throwStdErr("Vector3DLICRendererExtractor::startSlaveElement: Cannot be called on master node");
	
	/* Create a new volume renderer visualization element: */
	return new Vector3DLICRenderer(this,extractParameters);
	}

template <class DataSetWrapperParam>
inline
void
Vector3DLICRendererExtractor<DataSetWrapperParam>::LICStepSizeValueCallback(
	GLMotif::TextFieldSlider::ValueChangedCallbackData* cbData)
	{
        if(cbData->slider == LICStepSizeValueSlider)
                {
                parameters.licStepSize = Scalar(cbData->value);
                }
	}

}

}
